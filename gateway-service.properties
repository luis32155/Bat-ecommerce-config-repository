spring.application.name=gateway-service
server.port=8080

eureka.client.service-url.defaultZone=http://localhost:8761/eureka

spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

jwt.secret=TuClaveSecretaMasSeguraYDeLongitudAdecuadaParaHS512

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration

# --- CORS global en Gateway ---
spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping=true
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origin-patterns[0]=http://localhost:4200
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].exposed-headers=Authorization,Content-Type,X-Total-Count
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true
spring.cloud.gateway.globalcors.cors-configurations.[/**].max-age=3600

# --- Evita duplicados; NO remuevas los headers CORS ---
spring.cloud.gateway.default-filters[0]=DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials Vary, RETAIN_FIRST

# --- Rutas vía Eureka (lb://) ---
# Si tu micro de catálogo se registra como CATALOG-SERVICE (o catalog-service),
# expone /productos/..., y desde Angular llamas /catalog-service/...
spring.cloud.gateway.routes[0].id=catalog
spring.cloud.gateway.routes[0].uri=lb://CATALOG-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/catalog-service/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
